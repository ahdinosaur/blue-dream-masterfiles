
bundle agent configure_apps {
  vars:
    gentoo::
      "base_packages" slist => 
      {
        # admin
        "app-admin/sudo",
	"app-admin/syslog-ng",
	"app-editors/vim",
	"app-misc/mc",
	"app-misc/tmux",
	"app-shells/zsh",
	"dev-vcs/git",
	"net-analyzer/nmap",
	"sys-process/htop,
	# control
	"net-misc/cfengine",
	# kernel
	"sys-kernel/genkernel",
	# net
	"net-misc/dhcpcd",
	# boot
	"sys-boot/grub"
       }

      "fun_packages" slist =>
      {
        # audio
	"media-libs/alsa-lib",
	"media-plugins/gst-plugins-alsa",
	"media-sound/alsa-headers",
	"media-sound/alsa-utils",
	# awesome
	"media-gfx/feh",
	"app-emulation/virtualbox",
	"media-video/vlc",
	"app-office/libreoffice",
	"app-text/zathura",
	"app-text/zathura-pdf-poppler",
	"www-client/firefox",
	"www-plugins/adobe-flash",
	"x11-apps/setxkbmap",
	"x11-apps/xinit",
	"x11-base/xorg-server",
	"x11-misc/slim",
	"x11-misc/xclip",
	"x11-terms/rxvt-unicode",
	"x11-wm/awesome",
	"xfce-base/thunar",
	"net-voip/ekiga",
	# base
	"net-misc/ntp",
	"net-misc/openssh",
	"sys-apps/pciutils",
	"sys-apps/portage",
	# dev
	"dev-perl/Term-ReadLine-Gnu",
	"dev-lang/lua",
	"dev-lua/luarocks",
	"dev-vcs/gitflow",
	"mail-client/mutt",
	"net-irc/irssi"
        }

	# files to edit
	"files[sshd]" 		string => "/etc/ssh/sshd_config";
	"files[modules]"	string => "/etc/conf.d/modules";
	"files[xdm]"		string => "/etc/conf.d/xdm";
	"files[portage]"	string => "/etc/portage/make.conf";
	"files[profile]"	string => "/etc/portage/make.profile/parent";

	# sshd variables to set
	"sshd[PasswordAuthentication]"	string => "yes";
	"sshd[UsePAM]"			string => "yes";

	# kernel modules to set
    blue_dream::
        "modules[modules]"	string => "nvidia";

	# xdm variables to set
	"xdm[DISPLAYMANAGER]"	string => "slim";

	"portage[CFLAGS]"	string => "-O2 -march=native -pipe";
	"portage[CXXFLAGS]"	string => "${CFLAGS}";
	"portage[CHOST]"	string => "x86_64-pc-linux-gnu";
	"portage[MAKEOPTS]"	string => "-j5 -l1.95";
	"portage[EMERGE_DEFAULT_OPTS]" string => "-j4 --load-average 1.85";
	"portage[VIDEO_CARDS]" string => "nvidia";
	"portage[ACCEPT_KEYWORDS]" string => "amd64";
	"portage[FEATURES]" string => "ccache";
	"portage[CCACHE_DIR]" string => "/var/ccache";
	"portage[CCACHE_SIZE]" string => "4G";
	"portage[PORTAGE_NICENESS]" string => "15";

	"profile" string => "gentoo:funtoo/1.0/linux-gnu/arch/x86-64bit
gentoo:funtoo/1.0/linux-gnu/build/stable
gentoo:funtoo/1.0/linux-gnu/flavor/desktop
gentoo:funtoo/1.0/linux-gnu/mix-ins/xfce
dinolay:my_profiles/mix-ins/login
dinolay:my_profiles/mix-ins/disk
dinolay:my_profiles/mix-ins/awesome
dinolay:my_profiles/mix-ins/dev
dinolay:my_profiles/mix-ins/easy
dinolay:my_profiles/mix-ins/xfce
dinolay:my_profiles/mix-ins/nvidiaaaaaa";

    any::
	"portage[INPUT_DEVICES]" string => "evdev keyboard mouse";
	"portage[PORTDIR_OVERLAY]" string => "/usr/local/portage/";

  methods:
	"sshd" usebundle => edit_sshd;
	"modules" usebundle => app_quoted_variable_values("modules");
	"xdm" usebundle => app_quoted_variable_values("xdm");
	"portage_make" usebundle => app_quoted_variable_values("portage");
        "portage_profile" usebundle => app_file("profile");

  packages:
    any::
      "$(base_packages)"
       package_policy => "addupdate",
       package_method => generic;
    blue_dream::
      "$(fun_packages)"
       package_policy => "addupdate",
       package_method => generic;
}

bundle agent app_config_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "app",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_config_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");

}

bundle agent app_variable_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "app",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_variable_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");
}

bundle agent app_quoted_variable_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "app",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_quoted_variable_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");
}

bundle agent app_insert_lines(service) {
  files:
      "$(configure_apps.files[$(service)])"
       handle		=> "insert_lines_$(service)",
       comment		=> "ensure $(service) is configured correctly",
       create		=> "true",
       edit_line	=> insert_lines("configure_apps.$(service)"),
       classes		=> if_repaired("$(service)_restart_required");
}

bundle agent edit_sshd {

  methods:
        "sshd" usebundle => app_config_values("sshd");

  commands:
	sshd_restart_required::
	  "/etc/init.d/sshd restart"
		handle	=> "restart_sshd",
		comment	=> "restart sshd for configuration changes";
}
