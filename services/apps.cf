
bundle agent configure_apps {
  vars:
	# files to edit
	"files[sshd]" 		string => "/etc/ssh/sshd_config";
	"files[modules]"	string => "/etc/conf.d/modules";
	"files[xdm]"		string => "/etc/conf.d/xdm";
	"files[portage]"	string => "/etc/portage/make.conf";

	# sshd variables to set
	"sshd[PasswordAuthentication]"	string => "yes";
	"sshd[UsePAM]"			string => "yes";

	# kernel modules to set
    blue_dream::
        "modules[modules]"	string => "\"nvidia\"";

	# xdm variables to set
	"xdm[DISPLAYMANAGER]"	string => "\"slim\"";

	"portage[CFLAGS]"	string => "\"-O2 -march=corei7-avx -pipe\"";
	"portage[CXXFLAGS]"	string => "\"\${CFLAGS}\"";
	"portage[CHOST]"	string => "\"x86_64-pc-linux-gnu\"";
	"portage[MAKEOPTS]"	string => "\"-j5 -l1.95\"";
	"portage[EMERGE_DEFAULT_OPTS]" string => "\"-j4 --load-average=1.85\"";
	"portage[VIDEO_CARDS]" string => "\"nvidia\"";
	"portage[ACCEPT_KEYWORDS]" string => "\"amd64\"";
	"portage[FEATURES]" string => "\"ccache\"";
	"portage[CCACHE_DIR]" string => "\"/var/ccache\"";
	"portage[CCACHE_SIZE]" string => "\"4G\"";
	"portage[PORTAGE_NICENESS]" string => "\"15\"";

    any::
	"portage[INPUT_DEVICES]" string => "\"evdev keyboard mouse\"";
	"portage[PORTDIR_OVERLAY]" string => "\"/usr/local/portage/\"";

  methods:
	"sshd" usebundle => edit_sshd;
	"modules" usebundle => edit_service_variable_values("modules");
	"xdm" usebundle => edit_service_variable_values("xdm");
	"portage" usebundle => edit_service_variable_values("portage");
}

bundle agent edit_service_config_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "edit_service",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_config_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");

}

bundle agent edit_service_variable_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "edit_service",
	comment		=> "ensure sshd is configured correctly",
	create		=> "true",
	edit_line	=> set_variable_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");
}

bundle agent edit_sshd {

  methods:
        "sshd" usebundle => edit_service_config_values("sshd");

  commands:
	sshd_restart_required::
	  "/etc/init.d/sshd restart"
		handle	=> "restart_sshd",
		comment	=> "restart sshd for configuration changes";
}
