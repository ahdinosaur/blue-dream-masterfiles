
bundle agent configure_apps {
  vars:
	# files to edit
	"files[sshd]" 		string => "/etc/ssh/sshd_config";
	"files[modules]"	string => "/etc/conf.d/modules";
	"files[xdm]"		string => "/etc/conf.d/xdm";
	"files[portage]"	string => "/etc/portage/make.conf";
	"files[profile]"	string => "/etc/portage/make.profile/parent";
	"files[mrconfig]"	string => "/etc/mrconfig/";

	# sshd variables to set
	"sshd[PasswordAuthentication]"	string => "yes";
	"sshd[UsePAM]"			string => "yes";

	# kernel modules to set
    blue_dream::
        "modules[modules]"	string => "nvidia";

	# xdm variables to set
	"xdm[DISPLAYMANAGER]"	string => "slim";

	"portage[CFLAGS]"	string => "-O2 -march=native -pipe";
	"portage[CXXFLAGS]"	string => "${CFLAGS}";
	"portage[CHOST]"	string => "x86_64-pc-linux-gnu";
	"portage[MAKEOPTS]"	string => "-j5 -l1.95";
	"portage[EMERGE_DEFAULT_OPTS]" string => "-j4 --load-average 1.85";
	"portage[VIDEO_CARDS]" string => "nvidia";
	"portage[ACCEPT_KEYWORDS]" string => "amd64";
	"portage[FEATURES]" string => "ccache";
	"portage[CCACHE_DIR]" string => "/var/ccache";
	"portage[CCACHE_SIZE]" string => "4G";
	"portage[PORTAGE_NICENESS]" string => "15";

	"profile" string => "gentoo:funtoo/1.0/linux-gnu/arch/x86-64bit
gentoo:funtoo/1.0/linux-gnu/build/stable
gentoo:funtoo/1.0/linux-gnu/flavor/desktop
gentoo:funtoo/1.0/linux-gnu/mix-ins/xfce
dinolay:my_profiles/mix-ins/login
dinolay:my_profiles/mix-ins/disk
dinolay:my_profiles/mix-ins/awesome
dinolay:my_profiles/mix-ins/dev
dinolay:my_profiles/mix-ins/easy
dinolay:my_profiles/mix-ins/xfce
dinolay:my_profiles/mix-ins/nvidia";

	"mrconfig" string => "[DEFAULT]
git_gc = git gc \"$@\"
jobs = 15
include = cat /usr/share/mr/*

[/usr/local/portage]
checkout = git clone 'git@github.com:ahdinosaur/dinolay' 'dinolay'"

    any::
	"portage[INPUT_DEVICES]" string => "evdev keyboard mouse";
	"portage[PORTDIR_OVERLAY]" string => "/usr/local/portage/";

  methods:
	"sshd" usebundle => edit_sshd;
	"modules" usebundle => app_quoted_variable_values("modules");
	"xdm" usebundle => app_quoted_variable_values("xdm");
	"portage_make" usebundle => app_quoted_variable_values("portage");
        "portage_profile" usebundle => app_lines("profile");
	"mrconfig" usebundle => app_lines("mrconfig");
}

bundle agent app_config_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "app_$(service)_config_values",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_config_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");

}

bundle agent app_variable_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "app_$(service)_variable_values",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_variable_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");
}

bundle agent app_quoted_variable_values(service) {
  files:
	"$(configure_apps.files[$(service)])"
	handle		=> "app_$(service)_quoted_variable_values",
	comment		=> "ensure $(service) is configured correctly",
	create		=> "true",
	edit_line	=> set_quoted_variable_values("configure_apps.$(service)"),
	classes		=> if_repaired("$(service)_restart_required");
}

bundle agent app_lines(service) {
  files:
    "$(configure_apps.files[$(service)])"
     handle		=> "insert_lines_$(service)",
     comment		=> "ensure $(service) is configured correctly",
     create		=> "true",
     edit_line	=> insert_lines("$(configure_apps.$(service))"),
     classes		=> if_repaired("$(service)_restart_required");
}

bundle agent edit_sshd {

  methods:
        "sshd" usebundle => app_config_values("sshd");

  commands:
      "/etc/init.d/sshd restart"
	handle	=> "restart_sshd",
	ifvarclass => "$(service)_restart_required",
	comment	=> "restart sshd for configuration changes";
}
